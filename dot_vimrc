set nocompatible
if has("autocmd")
  filetype indent plugin on
endif

runtime macros/matchit.vim


" specify a directory for plugins
let g:python3_host_prog = '/usr/local/bin/python3'
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
Plug 'tpope/vim-eunuch'
" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
let g:deoplete#enable_at_startup = 1

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'Shougo/echodoc.vim'


Plug 'Shougo/defx.nvim'
nnoremap <silent><buffer><expr> <CR>
            \ defx#is_directory() ?
            \ defx#do_action('open_or_close_tree') :
            \ defx#do_action('drop')
noremap <silent><F4> <cmd>Defx -columns=icons:indent:filename:type<cr>

Plug 'kristijanhusak/defx-icons'
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 1


" Text Object 
Plug 'rhysd/vim-textobj-ruby'
Plug 'kana/vim-textobj-user'
let g:textobj_ruby_more_mappings = 1

Plug 'bkad/CamelCaseMotion'
let g:camelcasemotion_key = ','
"
"UI
Plug 'vim-airline/vim-airline'
Plug 'myusuf3/numbers.vim'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/promptline.vim'
Plug 'nathanaelkane/vim-indent-guides'
" Edit
Plug 'preservim/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
Plug 'easymotion/vim-easymotion'
Plug 'svermeulen/vim-yoink'
Plug 'svermeulen/vim-cutlass'
Plug 'svermeulen/vim-subversive'
Plug 'rstacruz/sparkup'
Plug 'tpope/vim-surround'
" Search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-repeat'

" Sidebar
Plug 'preservim/nerdtree'
" Git
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
Plug 'tpope/vim-fugitive'
Plug 'liuchengxu/vista.vim'

" Language
Plug 'Chiel92/vim-autoformat'
""" setting
Plug 'editorconfig/editorconfig-vim'
""" ruby
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'vim-ruby/vim-ruby'
""" go
Plug 'fatih/vim-go'
"""
Plug 'kchmck/vim-coffee-script'

""" tools
" operations
Plug 'tpope/vim-unimpaired'
Plug 'svermeulen/vim-subversive'
Plug 'tpope/vim-abolish'
Plug 'markonm/traces.vim'
" 數字
Plug 'glts/vim-magnum'
Plug 'glts/vim-radical'
Plug 'liuchengxu/vim-which-key'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
"""
call plug#end()

set updatetime=100
let mapleader = "\<SPACE>"
"""""""" subversive
let g:subversivePromptWithActualCommand=1
nmap r <plug>(SubversiveSubstitute)
nmap rr <plug>(SubversiveSubstituteLine)
nmap r$ <plug>(SubversiveSubstituteToEndOfLine)
nmap <leader>r <plug>(SubversiveSubstituteRange)
xmap <leader>r <plug>(SubversiveSubstituteRange)
nmap <leader>rr <plug>(SubversiveSubstituteWordRange)
nmap <leader><leader>r <plug>(SubversiveSubstituteRangeNoPrompt)
xmap <leader><leader>r <plug>(SubversiveSubstituteRangeNoPrompt)
nmap <leader><leader>rr <plug>(SubversiveSubstituteWordRangeNoPrompt)
nmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
xmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
nmap <leader>css <plug>(SubversiveSubstituteWordRangeConfirm)
""""""""
function SetLSPShortcuts()
  nnoremap <F5> :call LanguageClient_contextMenu()<CR>
  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
  nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
  nnoremap <leader><leader>ld :call LanguageClient#textDocument_definition({'gotoCmd': 'split'})<CR>
  nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
  nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
  nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
  nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
  nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
  nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
  nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
  nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
  nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
endfunction()

augroup LSP
  autocmd!
  autocmd FileType * call SetLSPShortcuts()
augroup END
set signcolumn=yes
let g:LanguageClient_useVirtualText = 'All'
let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')

""""""""
"
let g:formatdef_erb = '"RBENV_VERSION=$(rbenv global)  htmlbeautifier"'
let g:formatters_eruby = ['erb']
"
"""""""" auto reload file
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
""""""""
"""""""" indent guides
let g:indent_guides_enable_on_vim_startup = 1
""""""""
"""""""" cutlass
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)

nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
""""""""
"""""""" markdown
filetype plugin on
"Uncomment to override defaults:
let g:instant_markdown_slow = 1
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1
""""""""

"""""""" numbers
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'vista']
""""""""

"""""""" yoink
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)

nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
let g:yoinkIncludeDeleteOperations=1
nnoremap m d
xnoremap m d

nnoremap mm dd
nnoremap M D
nmap ,cs :let @*=expand("%")<CR>
nmap ,cl :let @*=expand("%:p")<CR>
""""""""

"""""""" fzf
nmap <expr> <c-p> yoink#canSwap() ? '<plug>(YoinkPostPasteSwapForward)' : ':Files<CR>'
"nnoremap <C-F> :Ag<space>
""""""""

"""""""" vista
" Note: this option only works the LSP executives, doesn't work for `:Vista ctags`.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]

" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista_default_executive = 'ctags'

let g:vista_executive_for = {
  \ 'go': 'vim_lsp',
  \ }

function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction

set statusline+=%{NearestMethodOrFunction()}

" By default vista.vim never run if you don't call it explicitly.
"
" If you want to show the nearest function in your statusline automatically,
" you can add the following line to your vimrc
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
""""""""

"""""""" autozimu/LanguageClient-neovim
"set hidden

"let g:LanguageClient_serverCommands = {
    "\ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    "\ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    "\ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    "\ 'python': ['/usr/local/bin/pyls'],
    "\ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    "\ }

"" note that if you are using Plug mapping you should not use `noremap` mappings.
"nmap <F5> <Plug>(lcn-menu)
"" Or map each action separately
"nmap <silent>K <Plug>(lcn-hover)
"nmap <silent> gd <Plug>(lcn-definition)
"nmap <silent> <F2> <Plug>(lcn-rename)
""""""""
"""""""" auto complete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
imap <c-space> <Plug>(asyncomplete_force_refresh)
""""""""
"""""""" line no
set relativenumber
set numberwidth=6
""""""""

"""""""" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline#extensions#hunks#enabled=0
let g:airline#extensions#branch#enabled=0
set laststatus=2
""""""""

"""""""" gitgutter
let g:gitgutter_signs = 1
let g:gitgutter_enabled = 1
""""""""

" Launch gopls when Go files are in use
let g:LanguageClient_serverCommands = {
       \ 'javascript': [ 'javascript-typescript-stdio' ],
       \ 'go': ['gopls'],
       \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio']
       \ }
" Run gofmt on save
autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
""""""""

"""""""" easymotion DO
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
"""""""" easymotion END

"""""""" MY FUNC
" Auto reload vimrc
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc,init.vim so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

"""""" Anti Reload gaurd
let s:k_version = '100'
if &cp || (exists("g:loaded_foobar")
      \ && (g:loaded_foobar>= s:k_version)
      \ && !exists('g:force_reload_foobar'))
  finish
endif
let g:loaded_foobar= s:k_version
let s:cpo_save=&cpo
set cpo&vim
"""""" Anti Reload gaurd
" Write your plugins hear
"""""" Anti Reload gaurd
let &cpo=s:cpo_save
"""""" Anti Reload gaurd

"""""""" MY FUNC
"""""""" MY CONFIG
set mouse=a
set clipboard=unnamed 
""""""""
let g:echodoc#enable_at_startup = 1
set cmdheight=2
let g:echodoc#type = 'signature'

nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

