
" specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')
Plug 'github/copilot.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'mfussenegger/nvim-ts-hint-textobject'
Plug 'akinsho/toggleterm.nvim', {'tag': 'v1.*'}
" For puppet
Plug 'mrk21/yaml-vim'
Plug 'rodjek/vim-puppet'
"Plug 'fatih/vim-go'
"""""
Plug 'aserebryakov/vim-todo-lists'
Plug 'towolf/vim-helm'

Plug 'honza/vim-snippets'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-eunuch'
" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'brglng/vim-im-select'
Plug 'tmux-plugins/vim-tmux-focus-events'
"UI
Plug 'myusuf3/numbers.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'edkolev/promptline.vim'
Plug 'nathanaelkane/vim-indent-guides'
" Edit
Plug 'preservim/nerdcommenter'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'svermeulen/vim-yoink'
Plug 'svermeulen/vim-cutlass'
Plug 'svermeulen/vim-subversive'
Plug 'rstacruz/sparkup'
Plug 'tpope/vim-surround'
" Search

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-repeat'

if has('nvim')
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif
" Sidebar
" Git
if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
endif
Plug 'tpope/vim-fugitive'
Plug 'liuchengxu/vista.vim'

""" setting
Plug 'editorconfig/editorconfig-vim'

""" tools
" operations
Plug 'tpope/vim-unimpaired'
Plug 'svermeulen/vim-subversive'
Plug 'tpope/vim-abolish'
Plug 'markonm/traces.vim'
" 數字
Plug 'glts/vim-magnum'
Plug 'liuchengxu/vim-which-key'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
Plug 'tpope/vim-dotenv'
"Plug 'joshdick/onedark.vim'
Plug 'navarasu/onedark.nvim' " support tree sitter
Plug 'Shougo/echodoc.vim'

Plug 'tpope/vim-dadbod'
Plug 'vim-scripts/dbext.vim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
"""
call plug#end()
colorscheme onedark
let g:onedark_termcolors=256
let g:onedark_terminal_italics=0
set updatetime=100
let g:formatdef_erb = '"RBENV_VERSION=$(rbenv global)  htmlbeautifier"'
let g:formatters_eruby = ['erb']
"
"""""""" auto reload file
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
""""""""
"""""""" indent guides
let g:indent_guides_enable_on_vim_startup = 1
""""""""
"""""""" cutlass
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)

nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
""""""""
"""""""" markdown
filetype plugin on
"Uncomment to override defaults:
let g:instant_markdown_slow = 1
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
"let g:instant_markdown_mathjax = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
"let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8888
"let g:instant_markdown_python = 1

""""""""
autocmd FileType python let b:coc_root_patterns = ['go.mod','.git', '.env', 'venv']
"""""""" numbers
let g:numbers_exclude = ['tagbar', 'gundo', 'minibufexpl', 'nerdtree', 'vista']
""""""""
let g:coc_global_extensions = ['coc-pyright','coc-go' , 'coc-sql','coc-browser', 'coc-explorer', 'coc-sqlfluff', 'coc-json', 'coc-git', 'coc-dictionary', 'coc-css', 'coc-marketplace', 'coc-tsserver', 'coc-prettier', 'coc-pairs', 'coc-yank', 'coc-yaml', 'coc-word', 'coc-vimlsp', 'coc-snippets', 'coc-tag', 'coc-html', 'coc-spell-checker', 'coc-html', 'coc-yaml', 'coc-vimlsp', 'coc-just-complete', 'coc-markdownlint', 'coc-html-css-support', 'coc-db', 'coc-htmlhint', 'coc-fzf-preview', 'coc-sh', 'coc-diagnostic', 'coc-rust-analyzer', 'coc-rls', 'coc-marketplace', 'coc-ultisnips']

"""""""" yoink
nmap <c-n> <plug>(YoinkPostPasteSwapBack)
nmap <c-p> <plug>(YoinkPostPasteSwapForward)

nmap p <plug>(YoinkPaste_p)
nmap P <plug>(YoinkPaste_P)
let g:yoinkIncludeDeleteOperations=1
nnoremap m d
xnoremap m d

nnoremap mm dd
nnoremap M D
nmap ,cs :let @*=expand("%")<CR>
nmap ,cl :let @*=expand("%:p")<CR>
""""""""

"""""""" fzf
nmap <expr> <c-p> yoink#canSwap() ? '<plug>(YoinkPostPasteSwapForward)' : ':CocCommand fzf-preview.GitFiles<CR>'
""""""""

"""""""" line no
set relativenumber
set numberwidth=4
""""""""
let g:vista_default_executive = 'coc'
let g:vista_finder_alternative_executives = ['coc']
function! NearestSymbol() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
call airline#parts#define_function('nearest_symbol', 'NearestSymbol')
autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

"""""""" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='bubblegum'
let g:airline_solarized_bg='dark'
set laststatus=2


function! AirlineInit()
  let g:airline_section_a = airline#section#create(['branch'])
  let g:airline_section_b = ''  
  let g:airline_section_c = airline#section#create(['nearest_symbol'])  
  let g:airline_section_x = airline#section#create(['filetype'])
endfunction
autocmd VimEnter * call AirlineInit()
let g:airline_statusline_ontop=1
""""""""

"""""""" gitgutter
let g:gitgutter_signs = 1
let g:gitgutter_enabled = 1
""""""""

"""""""" MY FUNC

"""""" Anti Reload gaurd
let s:k_version = '100'
if &cp || (exists("g:loaded_foobar")
      \ && (g:loaded_foobar>= s:k_version)
      \ && !exists('g:force_reload_foobar'))
  finish
endif
let g:loaded_foobar= s:k_version
let s:cpo_save=&cpo
set cpo&vim
"""""" Anti Reload gaurd
" Write your plugins hear
"""""" Anti Reload gaurd
let &cpo=s:cpo_save
"""""" Anti Reload gaurd

"""""""" MY FUNC



"""""""" COC
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json,go,ruby,javascript,rust setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
"

function! s:GrepFromSelected(type)
  let saved_unnamed_register = @@
  if a:type ==# 'v'
    normal! `<v`>y
  elseif a:type ==# 'char'
    normal! `[v`]y
  else
    return
  endif
  let word = substitute(@@, '\n$', '', 'g')
  let word = escape(word, '| ')
  let @@ = saved_unnamed_register
  execute 'CocList grep '.word
endfunction
""""""""""""""""""""

autocmd FileType sql DB b:db = DotenvGet('DATABASE_URL')

" use space to complete the selection in cmd mode
cnoremap <expr> <space>  wildmenumode()?"\<space>\<BS>":"\<space>"
nmap <F9> :nohl<CR>


autocmd BufRead,BufNewFile *.zsh set filetype=bash
autocmd BufRead,BufNewFile .zsh* set filetype=bash
