# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# History
#

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# Remove path separator from WORDCHARS.
WORDCHARS=${WORDCHARS//[\/]}

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
#zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${ZDOTDIR:-${HOME}}/.zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

# zsh-history-substring-search

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi

bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
# }}} End configuration added by Zim install

export XDG_CONFIG_HOME=$HOME/.config

export TERM=xterm-256color

setopt no_nomatch
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# iterm2 intergration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
iterm2_print_user_vars() {
iterm2_set_user_var awsProfile $AWS_PROFILE
KUBECONTEXT=$(CTX=$(kubectl config current-context) 2> /dev/null;if [ $? -eq 0 ]; then echo $CTX;fi)
iterm2_set_user_var kubeContext $KUBECONTEXT
}
#typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

alias ls="ls -a"
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias vim='nvim'
export EDITOR=nvim
export VISUAL=nvim

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH=$HOME/go/bin/:$PATH
export PATH=$HOME/bin/:$PATH
export PATH=/usr/local/opt/rabbitmq/sbin:$PATH
export PATH="$HOME/bin:/usr/local/opt/qt@5.5/bin:$PATH"
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh ]]
eval "$(direnv hook zsh)"
#set -x
#gvm use 1.14
# The next line updates PATH for the Google Cloud SDK.
#if [ -f '$HOME/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
#if [ -f '$HOME/google-cloud-sdk/completion.zsh.inc' ]; then . '$HOME/google-cloud-sdk/completion.zsh.inc'; fi

if [ -f '/usr/local/bin/aws_zsh_completer.sh' ]; then . '/usr/local/bin/aws_zsh_completer.sh'; fi
#if [ -f "$HOME/istio-1.8.1/tools/_istioctl" ]; then . "$HOME/istio-1.8.1/tools/_istioctl"; fi

# npm global package install issue
export NPM_PACKAGES="/usr/local/npm_packages"
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
export PATH="$NPM_PACKAGES/bin:$PATH"

export PATH="/usr/local/opt/terraform@0.11/bin:$PATH"

# rm prevent
function trash() { mv "$@" ~/.Trash; }

# 方便用
alias ag='ag --ignore ~/.ignore' 
alias md='mkdir -p'

function loop() {
  while 1; do
    eval $@
  done
}

function c() {
  if [ -t $@ ]; then
    cat "$@" | less
  else
    all=""
    while read data; do
      all="$all$data"
    done
    echo all | less
  fi
}
alias k="kubectl"

[[ -s /home/ubuntu/.autojump/etc/profile.d/autojump.sh ]] && source /home/ubuntu/.autojump/etc/profile.d/autojump.sh
type rbenv &> /dev/null && eval "$(rbenv init -)"

### NVM
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
### NVM


### VIM
#ZLE_RPROMPT_INDENT=0
###

### pipx autoenv
export PATH=$HOME/.local/bin:$PATH
###
PATH="$PATH:$HOME/istio-1.8.1/bin"
eval $(thefuck --alias)

DOCKER_BUILDKIT=0

export PATH="/usr/local/opt/mysql-client/bin:$PATH"
[[ -x jira ]] && eval "$(jira --completion-script-bash)"


alias eks_dev="aws eks update-kubeconfig --name bv-tv-dev-eks-general --profile bv-dev"
alias dev_db="eks_dev && kubectl port-forward port-forward-db 3308:3306 && echo :33080"
alias aks_dev="az aks get-credentials --resource-group kkstream-jpe-blendvision-dev --name kkstream-jpe-blendvision-dev "

alias ghload='nodemon -e .go --signal SIGTERM --watch . --exec'
alias gtdd="nodemon -e .go --watch . --exec 'go test ./... -v || exit 1'"

alias urldecode='python3 -c "import sys, urllib.parse as ul; \
    print(ul.unquote_plus(sys.argv[1]))"'

alias urlencode='python3 -c "import sys, urllib.parse as ul; \
    print (ul.quote_plus(sys.argv[1]))"'

alias live-dev-worker="ssh -i ~/.ssh/live-worker.pem ubuntu@workstation.madmax.kkv-test.com"
alias live-stag-worker="ssh -i ~/.ssh/live-worker.pem ubuntu@workstation.madmax.kkvqa.com"
alias live-prod-worker="ssh -i ~/.ssh/live-worker.pem ubuntu@workstation.live.kkstream.io"
alias ggp='Gb --show-current git push --set-upstream origin $(Gb --show-current)'
export POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true
alias rhload='nodemon -e .rs --watch . --exec'
alias phload='nodemon -e .py --watch . --exec'
export ALL_DOT_FILE='.tmux.conf .zprofile .zimrc .zshenv .zshrc .vimrc .config/nvim/coc-settings.json .config/nvim/init.vim .config/nvim/**/*'
alias chezmoi_save="chezmoi add $ALL_DOT_FILE"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/daniellin/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/daniellin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/daniellin/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/daniellin/google-cloud-sdk/completion.zsh.inc'; fi
export PATH=$HOME/google-cloud-sdk/bin:/usr/local/opt/mysql-client/bin:$HOME/.local/bin:$HOME/.rbenv/shims:/usr/local/opt/terraform@0.11/bin:/usr/local/npm_packages/bin:$HOME/bin:/usr/local/opt/qt@5.5/bin:/usr/local/opt/rabbitmq/sbin:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/mysql-client/bin:/usr/local/npm_packages/bin:$HOME/go/bin
GOPATH=$HOME/go


# Carousell
export LOCALENV_PATH=${HOME}/carousell-localenv
export PATH="${LOCALENV_PATH}/localenv:$PATH"

function ls_kv() {
  server=$1
  query="Key"
  for item in ${@[@]:2}; do
    query+=".*$item"
  done
  gron ${server}/v1/kv/config?recurse=true | grep -e ${query} -A 5|egrep '(Key|Value)' |gron -u | jq -r  'del(.[]|nulls)|map({k: .Key, v: .Value | @base64d})'
}

function ls_key() {
  server=$1
  query="Key"
  for item in ${@[@]:2}; do
    query+=".*$item"
  done
  gron ${server}/v1/kv/config?recurse=true | grep -e ${query} |gron -u | jq -r  'del(.[]|nulls)|map(.Key)'
}
